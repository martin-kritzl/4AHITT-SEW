<?xml version="1.0" encoding="UTF-8"?>
<!--Name des Projekts, den standardmaessigen target und den Startordner-->
<project name="Hello" default="main" basedir=".">

    <!--Definition der Variablen zur erleichterten Aenderung-->

    <!--Bitte nach Anforderungen anpassen-->
    <property name="scp.username" value="mkritzl"/>
    <property name="scp.dir" value="/var/www/"/>
    <property name="scp.hostname" value="10.0.0.25"/>

    <property name="git.remote" value="origin"/>
    <property name="git.branch" value="master"/>

    <property name="mail.user" value="mkritzl"/>

    <property name="build.dir" value="./build" />
    <!--${propertyname} ist zur Verwendung der Variablen-->
    <property name="reports.dir" value="${build.dir}/testreports/" />
    <property name="doc.dir" value="${build.dir}/javadoc/" />
    <property name="jar.dir" value="${build.dir}/" />
    <property name="jar.file" value="${ant.project.name}.jar" />
    <property name="classes.dir" value="${build.dir}"/>
    <property name="tests.dir" value="${classes.dir}/test" />
    <property name="lib.dir" value="./lib/"/>
    <property name="main.class" value="at.mkritzl.ant.data.Hello"/>
    <property name="source.dir" value="./src"/>
    <property name="ressources.dir" value="./ressources"/>
    <property name="genLanguage.dir" value="./language"/>

    <!--Includieren der notwendigen Libraries fuer scp-->
    <path id="scp.class.path">
        <pathelement location="${lib.dir}/jsch-0.1.51.jar"/>
        <!--Zuruecksetzen des Paths-->
        <path refid="classpath.base"/>
    </path>

    <!--Includieren der notwendigen Libraries fuer junit-->
    <path id="test.class.path">
        <!--Includieren der Klassen zum Testen-->
        <pathelement location="${classes.dir}"/>
        <pathelement location="${lib.dir}/junit-4.11.jar"/>
        <pathelement location="${lib.dir}/hamcrest-core-1.3.jar"/>
        <path refid="classpath.base"/>
    </path>

    <!--Zuruecksetzen des Paths-->
    <path id="classpath.base">
    </path>

    <!--Definieren des Classloaders-->
    <taskdef resource="net/jtools/classloadertask/antlib.xml">
        <classpath>
            <fileset dir="${lib.dir}" includes="ant-classloader*.jar"/>
        </classpath>
    </taskdef>

    <!--Ueber den Classloader wirden die Libraries eingebunden-->
    <classloader loader="system">
        <classpath>
            <fileset dir="${lib.dir}" includes="jsch*.jar"/>
            <fileset dir="${lib.dir}" includes="mail.jar"/>
        </classpath>
    </classloader>

    <!--Startpunkt der Datei-->
    <!--Depends sind die targets die zuvor ausgefuehrt werden muessen-->
    <!--<target name="main" depends="clean,run,doc,junitreport,mail"/>-->
    <target name="main" depends="run,mail,junitreport,doc,scm"/>

    <!--Loescht alle erstellten Files-->
    <target name="clean" depends="">
        <delete dir="${build.dir}" />
    </target>

    <!--Compiliert alle Klassen und fuegt junit hinzu-->
    <target name="compile" depends="clean">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${genLanguage.dir}" destdir="${classes.dir}">
            <classpath refid="test.class.path"/>
        </javac>
    </target>

    <!--Erstellt das jarFile und setzt die Main-Klasse-->
    <target name="jar" depends= "compile" >
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${jar.file}" basedir="${build.dir}"  excludes="jar">
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>
    </target>

    <!--Fuehrt das jar-File aus-->
    <target name="run" depends="jar" >
        <java jar="${jar.dir}/${ant.project.name}.jar"
              fork="true"/>
    </target>

    <!--Erstellt xml-Files aus den Testfaellen die nachher in html exportiert werden-->
    <target name="junit">
        <mkdir dir="${reports.dir}"/>
        <junit fork="yes" printsummary="no" haltonfailure="no">
            <batchtest fork="yes" todir="${reports.dir}" >
                <fileset dir="${classes.dir}">
                    <include name="**/*Test.class" />
                </fileset>
            </batchtest>
            <formatter type="xml" />
            <classpath refid="test.class.path" />
        </junit>
    </target>

    <!--Erstellt einen html Report und legt ihn unter reports ab-->
    <target name="junitreport" depends="junit">
        <junitreport todir="${reports.dir}">
            <fileset dir="${reports.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${reports.dir}" />
        </junitreport>
    </target>

    <!--Erstellt javadoc der source-Datein-->
    <target name="doc" depends="compile">
        <javadoc
                sourcepath="${source.dir}"
                excludepackagenames="at.mkritzl.ant.test.*"
                defaultexcludes="yes"
                destdir="${doc.dir}"
                author="true"
                version="true"
                use="true"
                windowtitle="Test API"/>
    </target>

    <!--Kopiert das erstellte jar auf einen anderen Rechner oder Direktory-->
    <!--Dabei wird das Password abgefragt-->
    <target name="copy" depends= "jar">
        <local name="scp.password"/>
        <input message="Remote-Password:" addproperty="scp.password">
            <handler type="secure"/>
        </input>
        <scp file="${jar.dir}${jar.file}" todir="${scp.username}:${scp.password}@${scp.hostname}:${scp.dir}" trust="true"/>
    </target>

    <!--Schreibt eine Nachricht an die TGM-Mail mit dem eingestellten Namen-->
    <target name="mail" depends="compile">
        <local name="mail.password"/>
        <!--Sichere Abfrage des Passworts des Smtp-Servers-->
        <input message="Mail-Password:" addproperty="mail.password">
            <handler type="secure"/>
        </input>
        <!--Verschicken der Mail-->
        <mail mailhost="sophos.tgm.ac.at" ssl="true" mailport="465" subject="Build finished" user="${mail.user}" password="${mail.password}">
            <from address="${mail.user}@student.tgm.ac.at"/>
            <to address="${mail.user}@student.tgm.ac.at"/>
            <message>The build has finished</message>
        </mail>
    </target>

    <!--Definiert die Verwendung des Befehls git-->
    <macrodef name="git">
        <!--Hier wird der Befehl von git eingetragen z.B. pull-->
        <attribute name="command" />
        <!--Directory fuer add-->
        <attribute name="dir" default="" />
        <!--Argumente wie z.B. origin master-->
        <element name="args" optional="true" />
        <sequential>
            <echo message="git @{command}" />
            <!--Ausfuehren von Git-->
            <exec executable="git" dir="@{dir}">
                <arg value="@{command}" />
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <!--Pushen der geaenderten Daten auf git-->
    <target name="scm" description="Commits all changes to version git">
        <!--Erstellen eines Zeitstempels-->
        <tstamp>
            <format property="version" pattern="yyyyMMddHHmm" />
        </tstamp>
        <!--Eintragen des Commit-Textes-->
        <input message="Commit message" addproperty="commit-message"/>
        <echo message="All changes will be committed with message: ${commit-message}" />
        <git command="add">
            <args>
                <arg value="." />
            </args>
        </git>
        <!--Committen mit der eingegebenen Message-->
        <git command="commit">
            <args>
                <arg value="-am ${commit-message}" />
            </args>
        </git>
        <!--Taggen mit dem Namen des Projekts und der Version-->
        <git command="tag">
            <args>
                <arg value="deploy-${ant.project.name}-${version}"/>
            </args>
        </git>
        <!--Pushen mit Tags-->
        <git command="push">
            <args>
                <arg line="-u ${git.remote} ${git.branch} --tags" />
            </args>
        </git>
    </target>

    <!--Sprache Deutsch-->
    <!--Veraendern von Strings im Quellcode um die Sprache zu aendern-->
    <target name="lang-de" depends="">
        <translate toDir="${genLanguage.dir}"
                   starttoken="%"
                   endtoken="%"
                   bundle="${ressources.dir}${ressources.dir}"
                   bundlecountry="DE"
                   bundlelanguage="ger"
                   forceoverwrite="yes"
                   srcencoding="utf-8"
                   destencoding="utf-8"
                   bundleencoding="utf-8">
            <fileset dir="${source.dir}">
                <include name="**/*.java"/>
            </fileset>
        </translate>
    </target>

    <!--Sprache Englisch-->
    <!--Veraendern von Strings im Quellcode um die Sprache zu aendern-->
    <target name="lang-en" depends="">
        <translate toDir="${genLanguage.dir}"
                   starttoken="%"
                   endtoken="%"
                   bundle="${ressources.dir}${ressources.dir}"
                   bundlecountry="EN"
                   bundlelanguage="en"
                   forceoverwrite="yes"
                   srcencoding="utf-8"
                   destencoding="utf-8"
                   bundleencoding="utf-8">
            <fileset dir="${source.dir}">
                <include name="**/*.java"/>
            </fileset>
        </translate>
    </target>
</project>